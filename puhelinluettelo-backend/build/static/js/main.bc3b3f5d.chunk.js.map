{"version":3,"sources":["PersonService.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","FilterControl","filter","handleFilterChange","value","onChange","PersonForm","handleSubmit","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","PersonList","persons","onPersonDelete","p","name","toLowerCase","includes","map","key","number","onClick","Notification","message","className","success","text","App","useState","setPersons","setNewName","setNewNumber","setFilter","notificationMessage","setNotificationMessage","useEffect","PersonService","personList","showNotification","setTimeout","createPerson","person","newPerson","concat","clearFields","catch","error","updatePerson","updatedPerson","console","log","e","target","preventDefault","existingPerson","find","window","confirm","newPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc3b3f5d.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react'\nimport './app.css'\nimport PersonService from './PersonService'\n\nconst FilterControl = ({filter, handleFilterChange}) => (\n  <>filter shown with: <input value={filter} onChange={handleFilterChange} /></>\n)\n\nconst PersonForm = ({\n  handleSubmit,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange\n}) => (\n  <form onSubmit={handleSubmit}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange} />\n      <br />\n      number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nconst PersonList = ({persons, filter, onPersonDelete}) => (\n  persons\n    .filter(p => p.name.toLowerCase().includes(filter))\n    .map(p => (\n      <div key={p.name}>\n        <span>{p.name}Â {p.number}</span>\n        <button onClick={() => onPersonDelete(p)}>DELETE</button>\n\n      </div>\n    ))\n)\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={`notification ${message.success ? 'success' : 'error'}`}>\n      {message.text}\n    </div>\n  )\n}\n\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n\n  useEffect(() => {\n    PersonService\n      .getAll()\n      .then(personList => {\n        setPersons(personList)\n      })\n  }, [])\n\n  const handleNameChange = e => {\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = e => {\n    setNewNumber(e.target.value)\n  }\n\n  const handleFilterChange = e => {\n    setFilter(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if(newName && newNumber) {\n      const existingPerson = persons.find(p => p.name === newName)\n      if (existingPerson) {\n        if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n          updatePerson(existingPerson.id, {...existingPerson, number: newNumber})\n        }\n      } else {\n        createPerson({name: newName, number: newNumber})\n      }\n    }\n  }\n\n  const showNotification = (text, success) => {\n    setNotificationMessage({text, success})\n    setTimeout(() => {\n      setNotificationMessage(null)\n    }, 5000)\n  }\n\n  const createPerson = person => {\n    PersonService\n      .create(person)\n      .then(newPerson => {\n        setPersons(persons.concat(newPerson))\n        clearFields()\n        showNotification(`Added ${newPerson.name}`, true)\n      })\n      .catch(error => {\n        if(error.response.data.error) {\n          showNotification(error.response.data.error, false)\n        } else {\n          showNotification(`Adding the number for ${person.name} failed.`, false)\n        }\n      })\n  }\n\n  const deletePerson = person => {\n    if (window.confirm(`Delete ${person.name}?`)) { \n      PersonService\n        .remove(person.id)\n        .then(() => {\n          const newPersons = persons.filter(p => p.id !== person.id)\n          setPersons(newPersons)\n          showNotification(`Deleted ${person.name}`, true)\n        })\n        .catch(error => {\n          showNotification(`Information of ${person.name} has already been removed from the server`, false)\n        })\n    }\n  }\n\n  const updatePerson = (id, updatedPerson) => {\n    PersonService\n      .update(id, updatedPerson)\n      .then(newPerson => {\n        setPersons(persons.map(p => p.id !== newPerson.id ? p : newPerson))\n        clearFields()\n        showNotification(`Updated ${newPerson.name}`, true)\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        if(error.response.data.error) {\n          showNotification(error.response.data.error, false)\n        } else {\n          showNotification(`Information of ${updatedPerson.name} has already been removed from the server`, false)\n        }\n      })\n  }\n\n  const clearFields = () => {\n    setNewName('') \n    setNewNumber('')\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <FilterControl filter={filter} handleFilterChange={handleFilterChange} />\n      <h2>Add a new</h2>\n      <PersonForm \n          handleSubmit={handleSubmit}\n          newName={newName}\n          handleNameChange={handleNameChange}\n          newNumber={newNumber}\n          handleNumberChange={handleNumberChange}\n      />\n      <Notification message={notificationMessage}  />\n\n      <h2>Numbers</h2>\n      <PersonList persons={persons} filter={filter} onPersonDelete={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}